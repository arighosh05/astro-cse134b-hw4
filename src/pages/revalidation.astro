---
import Layout from '../layouts/Layout.astro';
import Markdown from '../components/Markdown.astro';

// Define the tutorial content explaining the A* algorithm
const explainer = `
# Code

The A* (A-star) algorithm is a popular and efficient pathfinding and graph traversal technique widely used in applications such as game development, robotics, and navigation systems. It finds the shortest path between a start and a goal node by intelligently combining the advantages of uniform-cost search and heuristic search.

## How A* Works

A* uses a cost function defined as:

\\[
f(n) = g(n) + h(n)
\\]

Where:
- **g(n):** The actual cost from the start node to the current node \(n\).
- **h(n):** A heuristic estimate of the cost from \(n\) to the goal.
- **f(n):** The total estimated cost of the cheapest solution through \(n\).

The algorithm maintains two main sets:
- **Open Set:** Contains nodes to be evaluated (starting with the initial node).
- **Closed Set:** Contains nodes that have already been evaluated.

### Step-by-Step Process

1. **Initialization:**  
   Add the start node to the open set.

2. **Iteration:**  
   While the open set is not empty:
   - Select the node \(n\) from the open set with the lowest \(f(n)\).
   - If \(n\) is the goal, the shortest path has been found.
   - Move \(n\) from the open set to the closed set.
   - For each neighbor of \(n\):
     - If the neighbor is in the closed set, skip it.
     - Calculate the tentative \(g\) score (the cost from the start to the neighbor through \(n\)).
     - If this tentative score is lower than the previously recorded \(g\) score (or if the neighbor is not in the open set):
       - Update the neighbor’s \(g\) score.
       - Set the neighbor’s \(f\) score as \(g(n) + h(n)\).
       - Record \(n\) as the neighbor's predecessor.
       - Add the neighbor to the open set if it is not already present.

3. **Path Reconstruction:**  
   Once the goal is reached, reconstruct the path by tracing back from the goal node to the start node using the recorded predecessors.

## Example Pseudocode

Below is an example pseudocode representation of the A* algorithm:

\`\`\`js
function aStar(start, goal) {
  const openSet = new Set([start]);
  const cameFrom = new Map();

  const gScore = new Map();
  gScore.set(start, 0);

  const fScore = new Map();
  fScore.set(start, heuristic(start, goal));

  while (openSet.size > 0) {
    // Get the node in openSet with the lowest fScore
    let current = getLowestFScoreNode(openSet, fScore);
    
    if (current === goal) {
      return reconstructPath(cameFrom, current);
    }
    
    openSet.delete(current);
    
    for (let neighbor of current.neighbors) {
      let tentativeGScore = gScore.get(current) + distance(current, neighbor);
      
      if (tentativeGScore < (gScore.get(neighbor) || Infinity)) {
        cameFrom.set(neighbor, current);
        gScore.set(neighbor, tentativeGScore);
        fScore.set(neighbor, tentativeGScore + heuristic(neighbor, goal));
        openSet.add(neighbor);
      }
    }
  }
  
  return null; // No path found
}
\`\`\`

## Heuristic Functions

The choice of the heuristic \(h(n)\) is crucial for the performance of A*. To guarantee that A* finds an optimal solution, the heuristic must be **admissible**, meaning it never overestimates the true cost to reach the goal.

Common heuristics include:
- **Manhattan Distance:** Ideal for grid-based maps with horizontal and vertical movements.
- **Euclidean Distance:** Suitable when movement is allowed in any direction.

## When to Use A*

A* is especially effective for:
- **Navigation Systems:** Determining the shortest route in mapping applications.
- **Game Development:** Guiding characters or units in virtual environments.
- **Robotics:** Path planning and obstacle avoidance in dynamic settings.

## Conclusion

The A* algorithm stands out for its efficiency and accuracy in finding the shortest path by balancing actual path costs with heuristic estimations. Its versatility makes it a cornerstone in many fields where optimal navigation is key.

---

*Tutorial created by ChatGPT.*
`;

---
<Layout title="A* Algorithm Tutorial">
  <h1 class="mb-10">A* Algorithm Tutorial</h1>
  <Markdown content={explainer} class="prose" />
</Layout>
